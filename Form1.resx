<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>